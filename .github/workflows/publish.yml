name: Publish .NET Project

on:
  push:
    tags:
      - 'v*'  # Triggers on tags starting with 'v' (e.g., v1.0.0)

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Generate manifest.json
        run: |
          REPO_NAME="${{ github.event.repository.name }}"
          REPO_DESCRIPTION="${{ github.event.repository.description }}"
          VERSION="${{ env.VERSION }}"
          # Remove 'ScheduleOne' from REPO_NAME
          REPO_NAME="${REPO_NAME//ScheduleOne/}"
          cat <<EOF > manifest.json
          {
            "name": "${REPO_NAME// /_}",
            "version_number": "${VERSION}",
            "website_url": "https://github.com/${{ github.repository }}",
            "description": "${REPO_DESCRIPTION}",
            "dependencies": [
              "LavaGang-MelonLoader-0.7.0"
            ]
          }
          EOF
        shell: bash

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'  # Adjust to your project's .NET version

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Publish
        run: dotnet publish --no-build --configuration Release --output ./publish

      - name: Prepare Thunderstore Package
        run: |
          REPO_NAME="${{ github.event.repository.name }}"
          VERSION="${{ env.VERSION }}"
          PACKAGE_NAME="${REPO_NAME//ScheduleOne/}"  # Remove 'ScheduleOne' from REPO_NAME
          echo "PACKAGE_NAME=${PACKAGE_NAME}" >> $GITHUB_ENV
          
          # Create the ThunderstorePackage directory and copy necessary files
          mkdir -p ThunderstorePackage/
          cp manifest.json ThunderstorePackage/
          cp README.md ThunderstorePackage/
          cp icon.png ThunderstorePackage/
          cp ./publish/${REPO_NAME}.dll ThunderstorePackage/
          
          # Navigate to the ThunderstorePackage directory
          cd ThunderstorePackage
          
          # Create the ZIP file
          ZIP_FILE="../${PACKAGE_NAME}-v${VERSION}.zip"
          zip -r "$ZIP_FILE" .
          
          # Resolve the absolute path of the ZIP file
          ZIP_FILE_DIR=$(dirname "$(readlink -f "$ZIP_FILE")")
          
          # Set the ZIP file directory as a GitHub Actions environment variable
          echo "ZIP_FILE_DIR=${ZIP_FILE_DIR}" >> $GITHUB_ENV
          echo "${ZIP_FILE_DIR} ${ZIP_FILE}"
        shell: bash

#      - name: Create GitHub Release
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          gh release create v${{ env.VERSION }} "${{ env.PACKAGE_NAME }}-v${{ env.VERSION }}.zip" --title "Release ${{ env.VERSION }}" --notes "Release ${{ env.VERSION }}"

      - name: Publish to Thunderstore
        id: publish-thunderstore
        uses: dhkatz/thunderstore-publish@v1.0.1
        with:
          token: ${{ secrets.TS_TOKEN }}
          communities: 'schedule-i'
          namespace: 'MaxtorCoder'
          name: 'SaveUtility'
          description: '${{ github.event.repository.description }}'
          version: '${{ env.VERSION }}'
          file: '${{ env.ZIP_FILE_DIR }}//${{ github.event.repository.name }}/${{ env.PACKAGE_NAME }}-v${{ env.VERSION }}.zip'
          categories: 'mono,mods'
          deps: |
            "LavaGang-MelonLoader@0.7.0"

      - name: Output URL
        run: echo "Published Thunderstore package to ${{ steps.publish-thunderstore.outputs.url }}"
